If I have multiple blocks and read triangles in shared memory, I need a way to 
synchronize the multiple blocks to make sure that triangles are only loaded once. 
The multiple blocks  would otherwise each load the same triangles, even if on the same 
multiprocessor. 

Consider storing triangle coordinates in half precision (16 bits). 
----------------------------------------------------------------------
TODO: 

Consider a set of blocks [xmin, xmax, ymin, ymax, zmin, zmax]
Each block has a pointer to a list of triangles. 

struct Block {
	float xmin, xmax, ymin, ymax, zmin zmax;
	vector<Triangle> tris;
}

vector<Block> blocks;
---------------------------------------------------------------------
Consider a particle of velocity v, hitting a wall with normal n. 
v is not normalized, n is normalized. 

Projection of v onto the plane: 
 
 vp = v - (v.n) n
 vn = (v.n) n

 New velocity = (vp, -vn) = v - (v.n)n - v.n n
                          = v - 2n v.n
----------------------------------------------------------------------
9/14/2010
- Given sort and datastructures (start_cell_indices, end_cell_indices), and hash, what experiments to perform? 
1) Given collection of particles, compute collision forces of particles within a radius R
   - assume forces given by Leonnard Jones force: -(24*eps/a)*[2*(a/r)^{13}-(a/r)^{7}]
     = -(24*eps/a)*(a/r)^7 * [ 2*(a/r)^6 - 1. ]
	 r << a ==> F = -(24*eps)/a  2 * (a/r)^{13}
	 r >> a ==> F = +(24*eps)/a (a/r)^7

2) for each particle, search neighbors (I would rather not store them since there can be infinite number of neighbors). 
Compute the forces on each particle (sum of all neighboring particles)o

3) figure out how to restrict number of particles per cell to 8. 
----------------------------------------------------------------------
9/16/2010
256k particles
********* printAll
hash: tot (ms): 58.665, avg: 1.1733, (count=50)
sort: tot (ms): 1107.73, avg: 22.1547, (count=50)
build: tot (ms): 539.638, avg: 10.7928, (count=50)
neighbors: tot (ms): 5173.49, avg: 103.47, (count=50)
Total: 135 ms -> 6 fps

65k particles
hash: tot (ms): 82.762, avg: 1.65524, (count=50)
sort: tot (ms): 379.977, avg: 7.59954, (count=50)
build: tot (ms): 77.693, avg: 1.55386, (count=50)
neighbors: tot (ms): 390.026, avg: 7.80052, (count=50)
Total: 20ms -> 50fps
----------------------------------------------------------------------
